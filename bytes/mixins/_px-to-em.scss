/// Convert property and px values into em
/// @author Azin Asili
/// @access public
/// @param {property} $property - Property to convert values
/// @param {number} $values - Values to convert from px to em
/// @param {number} $base [get($bytes, 'font-size')] - em context
/// @require {function} _b-strip-unit - Strip unit from number
/// @require {function} get - Return key value from a map
/// @output Property and converted em values
/// @example scss
///   .foo {
///     @include em(padding, 10px);
///   }
/// @example css
///   .foo {
///     padding: .625em;
///   }
@mixin em($property, $values, $base: get($bytes, 'font-size')) {
  $font-size: _b-strip-unit($base);
  $em-values: ();

  // Loop through $values list
  // 1. Check for zero values and output 0
  // 2. Check if value == 1px or -1px and output 1px or -1px
  // 3. If value is not a number output the value
  // 4. Calculate em value
  @each $value in $values {
    @if type-of($value) == number {
      $value: _b-strip-unit($value);
    }

    @if type-of($value) != number {
      $em-values: join($em-values, $value);
    } @else if $value == 0 {
      $em-values: join($em-values, $value);
    } @else if $value == 1 or $value == -1 {
      $em-values: join($em-values, $value);
    } @else {
      $new-em-value: $value/$font-size;
      $em-values: join($em-values, #{$new-em-value}em);
    }
  }

  // Output em values
  #{$property}: $em-values;
}
