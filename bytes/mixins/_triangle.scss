/// Create CSS triangle of any size
/// @author Azin Asili
/// @access public
/// @param {number} $width - Width of triangle
/// @param {number} $height [$width] - Height of triangle
/// @param {color} $color [#000] - Color of triangle
/// @param {string} $direction ['bottom'] - Direction of triangle
/// @require {function} get - Return key value from a map
/// @require {function} set - Set key/value pair from map as CSS property and value
/// @output Border and border color depending on direction
/// @example scss
///   .foo {
///     @include triangle(20px, 10px, coral, 'right');
///   }
/// @example css
///   .foo {
///     display: inline-block;
///     border-left: 10px solid coral;
///     border-top: 10px solid transparent;
///     border-bottom: 10px solid transparent;
///   }
@mixin triangle($width, $height: $width, $color: #000, $direction: 'bottom') {
  $_size: ($width / 2);
  $_sides: (
    'top': (
      'border-bottom': $height solid $color,
      'border-left': $_size solid transparent,
      'border-right': $_size solid transparent,
    ),
    'right': (
      'border-left': $height solid $color,
      'border-top': $_size solid transparent,
      'border-bottom': $_size solid transparent,
    ),
    'bottom': (
      'border-top': $height solid $color,
      'border-left': $_size solid transparent,
      'border-right': $_size solid transparent,
    ),
    'left': (
      'border-right': $height solid $color,
      'border-top': $_size solid transparent,
      'border-bottom': $_size solid transparent,
    ),
  );
  $_angles: (
    'topLeft': (
      'border-top-color': $color,
      'border-left-color': $color,
    ),
    'topRight': (
      'border-top-color': $color,
      'border-right-color': $color,
    ),
    'bottomLeft': (
      'border-bottom-color': $color,
      'border-left-color': $color,
    ),
    'bottomRight': (
      'border-bottom-color': $color,
      'border-right-color': $color,
    ),
  );
  $_directions: map-merge($_sides, $_angles);
  $_angle-check: map-has-key($_angles, $direction);

  @if not map-has-key($_directions, $direction) {
    @error '`#{$direction}` is not a valid argument for `triangle()`, please use one of the following: #{map-keys($_directions)}';
  }

  display: inline-block;

  @if $width == $height and $_angle-check {
    border: $_size solid transparent;
    @include set(get($_angles, $direction));
  } @else {
    @if $_angle-check {
      @error '`triangle()` $width and $height must be the same to use `#{$direction}`';
    }

    @include set(get($_sides, $direction));
  }
}
