/// Create CSS triangle of any size
/// @author Azin Asili
/// @access public
/// @param {number} $width - Width of triangle
/// @param {number} $height - Height of triangle
/// @param {color} $color - Color of triangle
/// @param {string} $direction - Direction of triangle
/// @require {function} get - Return key value from a map
/// @output Border and border color depending on direction
/// @example scss
///   .foo {
///     @include triangle(20px, 10px, coral, right);
///   }
/// @example css
///   .foo {
//      display: inline-block;
//      border-left: 10px solid coral;
//      border-top: 10px solid transparent;
//      border-bottom: 10px solid transparent;
///   }
@mixin triangle($width, $height, $color: #000, $direction: bottom) {
  $directions: (
    top         : ('bottom', 'left', 'right'),
    right       : ('left', 'top', 'bottom'),
    bottom      : ('top', 'left', 'right'),
    left        : ('right', 'top', 'bottom'),
    topLeft     : (),
    topRight    : (),
    bottomLeft  : (),
    bottomRight : (),
  );

  @if not map-has-key($directions, $direction) {
    @error "Triangle $direction must be one of: #{map-keys($directions)}"
  }

  display: inline-block;

  @if $width == $height and index('topLeft' 'topRight' 'bottomLeft' 'bottomRight', $direction) {
    $size: $width/2;
    border: $size solid transparent;

    @if $direction == 'topLeft' {
      border-top-color: $color;
      border-left-color: $color;
    }

    @if $direction == 'topRight' {
      border-top-color: $color;
      border-right-color: $color;
    }

    @if $direction == 'bottomLeft' {
      border-bottom-color: $color;
      border-left-color: $color;
    }

    @if $direction == 'bottomRight' {
      border-right-color: $color;
      border-bottom-color: $color;
    }
  } @else {
    $sides: get($directions, $direction);
    $width: $width/2;
    border-#{nth($sides, 1)}: $height solid $color;
    border-#{nth($sides, 2)}: $width solid transparent;
    border-#{nth($sides, 3)}: $width solid transparent;
  }
}
