/// Set map as CSS declarations
///
/// @access public
///
/// @param {map} $map
///   Name of map
///
/// @param {key | map} $keys...
///   Name of key of a nested map
///
/// @example scss
///   $map: (
///     background: #000,
///     color: #fff,
///     hover: (
///       color: #eee
///     )
///   );
///   .foo {
///     @include set($map);
///
///     &:hover {
///       @include set($map, hover);
///     }
///   }
///
/// @example css
///   .foo {
///     background: #000;
///     color: #fff;
///   }
///   .foo:hover {
///     color: #eee;
///   }
///
/// @require {function} get
@mixin set($map, $keys...) {
  $_i: 1;
  $_length: length($keys);

  // Get items from map
  @while $_length >= $_i {
    $map: get($map, nth($keys, $_i));
    $_i: $_i + 1;
  }

  // Print styles that are not a map
  @each $property, $value in $map {
    @if type-of($value) != map {
      #{$property}: $value;
    }
  }
}
